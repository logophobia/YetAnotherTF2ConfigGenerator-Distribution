

<%@ val classWeaponSensitivity: scala.collection.immutable.Map[java.lang.String, scala.collection.immutable.List[Double]] %>
<%@ val classWeaponViewmodelSwitchMode: scala.collection.immutable.Map[java.lang.String, scala.collection.immutable.List[java.lang.String]] %>
<%@ val classWeaponShow: scala.collection.immutable.Map[java.lang.String, scala.collection.immutable.List[Boolean]] %>
<%@ val classWeaponTextBatch: scala.collection.immutable.Map[java.lang.String, scala.collection.immutable.List[Int]] %>
<%@ val classWeaponCrosshairs: scala.collection.immutable.Map[java.lang.String, scala.collection.immutable.List[java.lang.String]] %>
<%@ val classWeaponColors: scala.collection.immutable.Map[java.lang.String, scala.collection.immutable.List[scala.Tuple3[Int, Int, Int]]] %>
<%@ val classWeaponScales: scala.collection.immutable.Map[java.lang.String, scala.collection.immutable.List[Int]] %>
<%@ val classWeaponDingVolume: scala.collection.immutable.Map[java.lang.String, scala.collection.immutable.List[Double]] %>
<%@ val classWeaponDingPitchMax: scala.collection.immutable.Map[java.lang.String, scala.collection.immutable.List[Int]] %>
<%@ val classWeaponDingPitchMin: scala.collection.immutable.Map[java.lang.String, scala.collection.immutable.List[Int]] %>
<%@ val classEnableCrouchJump: scala.collection.immutable.Map[java.lang.String, Boolean] %>
<%@ val classInterpRatio: scala.collection.immutable.Map[java.lang.String, Double] %>
<%@ val dingEnable: Int %>
<%@ val damagenumbers: Int %>
<%@ val hideTracers: Boolean %>
<%@ val enableSprays: Boolean %>
<%@ val enableGibs: Boolean %>
<%@ val enableRagdolls: Boolean %>
<%@ val autoreload: Int %>
<%@ val fov: Int %>
<%@ val fastswitch: Int %>
<%@ val viewmodelFov: Int %>
<%@ val networkConfig: java.lang.String %>
<%@ val graphicsConfig: java.lang.String %>
<%@ val zoomFactor: Double %>
<%@ val scoreboardNetgraph: Int %>
<%@ val autocallThreshold: Int %>
<%@ val showHealBeam: Boolean %>
<%@ val healBatching: Int %>
<%@ val medicSayFake: java.lang.String %>
<%@ val medicSayUber: java.lang.String %>
<%@ val zoomSensitivity: Double %>
<%@ val noCrossHairZoom: Int %>
<%@ val fullChargeBell: Int %>
<%@ val hudMin: Int %>
<%@ val showFlames: Boolean %>
<%@ val showViewmodelCloak: Boolean %>
<%@ val disguiseCycleClasses: scala.collection.immutable.List[Int] %>
<%@ val disguiseFriendlyCycleClasses: scala.collection.immutable.List[Int] %>
<%@ val enableSpecTournamentMode: Int %>
<%@ val classExtraScripts: scala.collection.immutable.Map[java.lang.String, java.lang.String] %>
<%@ val autoexecExtraScript: java.lang.String %>
<%@ val movementFwd: java.lang.String %>
<%@ val movementLeft: java.lang.String %>
<%@ val movementRight: java.lang.String %>
<%@ val movementBack: java.lang.String %>
<%@ val primAttack: java.lang.String %>
<%@ val secAttack: java.lang.String %>
<%@ val ternaryAttack: java.lang.String %>
<%@ val primSecSwap: java.lang.String %>
<%@ val meleeSwap: java.lang.String %>
<%@ val previousWeapon: java.lang.String %>
<%@ val nextInvWeapon: java.lang.String %>
<%@ val prevInvWeapon: java.lang.String %>
<%@ val directWeapon1: java.lang.String %>
<%@ val directWeapon2: java.lang.String %>
<%@ val directWeapon3: java.lang.String %>
<%@ val directWeapon4: java.lang.String %>
<%@ val directWeapon5: java.lang.String %>
<%@ val jump: java.lang.String %>
<%@ val reloadWeapon: java.lang.String %>
<%@ val normalJump: java.lang.String %>
<%@ val voiceMenu1: java.lang.String %>
<%@ val voiceMenu2: java.lang.String %>
<%@ val voiceMenu3: java.lang.String %>
<%@ val actionSlot: java.lang.String %>
<%@ val taunt: java.lang.String %>
<%@ val dropItem: java.lang.String %>
<%@ val inspect: java.lang.String %>
<%@ val say: java.lang.String %>
<%@ val teamSay: java.lang.String %>
<%@ val console: java.lang.String %>
<%@ val duck: java.lang.String %>
<%@ val reloadhud: java.lang.String %>
<%@ val suicide: java.lang.String %>
<%@ val screenshot: java.lang.String %>
<%@ val saveReplay: java.lang.String %>
<%@ val abuseReport: java.lang.String %>
<%@ val quickSwitch: java.lang.String %>
<%@ val teamOnlyTalk: java.lang.String %>
<%@ val normalTalk: java.lang.String %>
<%@ val medic: java.lang.String %>
<%@ val scoreboard: java.lang.String %>
<%@ val backpack: java.lang.String %>
<%@ val backpackComplete: java.lang.String %>
<%@ val switchClass: java.lang.String %>
<%@ val switchTeam: java.lang.String %>
<%@ val medicRadar: java.lang.String %>
<%@ val zoom: java.lang.String %>
<%@ val spray: java.lang.String %>
<%@ val requestAccept: java.lang.String %>
<%@ val requestDecline: java.lang.String %>
<%@ val switchBadnet: java.lang.String %>
<%@ val switchGoodnet: java.lang.String %>
<%@ val switchLannet: java.lang.String %>
<%@ val startSpawnSwitch: java.lang.String %>
<%@ val finishSpawnSwitch: java.lang.String %>
<%@ val disguiseMenuToggle: java.lang.String %>
<%@ val disguiseCycle: java.lang.String %>
<%@ val disguiseFriendlyCycle: java.lang.String %>
<%@ val disguiseLast: java.lang.String %>
<%@ val disguiseScout: java.lang.String %>
<%@ val disguiseSoldier: java.lang.String %>
<%@ val disguisePyro: java.lang.String %>
<%@ val disguiseDemo: java.lang.String %>
<%@ val disguiseHeavy: java.lang.String %>
<%@ val disguiseEngineer: java.lang.String %>
<%@ val disguiseMedic: java.lang.String %>
<%@ val disguiseSniper: java.lang.String %>
<%@ val disguiseSpy: java.lang.String %>
<%@ val disguiseFriendlyScout: java.lang.String %>
<%@ val disguiseFriendlySoldier: java.lang.String %>
<%@ val disguiseFriendlyPyro: java.lang.String %>
<%@ val disguiseFriendlyDemo: java.lang.String %>
<%@ val disguiseFriendlyHeavy: java.lang.String %>
<%@ val disguiseFriendlyEngineer: java.lang.String %>
<%@ val disguiseFriendlyMedic: java.lang.String %>
<%@ val disguiseFriendlySniper: java.lang.String %>
<%@ val disguiseFriendlySpy: java.lang.String %>
<%@ val buildSentry: java.lang.String %>
<%@ val buildDispenser: java.lang.String %>
<%@ val buildEntrance: java.lang.String %>
<%@ val buildExit: java.lang.String %>
<%@ val destroySentry: java.lang.String %>
<%@ val destroyDispenser: java.lang.String %>
<%@ val destroyEntrance: java.lang.String %>
<%@ val destroyExit: java.lang.String %>
<%@ val switchSpec: java.lang.String %>
<%@ val toggleReady: java.lang.String %>
<%@ val voice01: java.lang.String %>
<%@ val voice02: java.lang.String %>
<%@ val voice03: java.lang.String %>
<%@ val voice04: java.lang.String %>
<%@ val voice05: java.lang.String %>
<%@ val voice06: java.lang.String %>
<%@ val voice07: java.lang.String %>
<%@ val voice10: java.lang.String %>
<%@ val voice11: java.lang.String %>
<%@ val voice12: java.lang.String %>
<%@ val voice13: java.lang.String %>
<%@ val voice14: java.lang.String %>
<%@ val voice15: java.lang.String %>
<%@ val voice16: java.lang.String %>
<%@ val voice17: java.lang.String %>
<%@ val voice20: java.lang.String %>
<%@ val voice21: java.lang.String %>
<%@ val voice22: java.lang.String %>
<%@ val voice23: java.lang.String %>
<%@ val voice24: java.lang.String %>
<%@ val voice25: java.lang.String %>
<%@ val voice26: java.lang.String %>
<%@ val voice27: java.lang.String %>
<%@ val currentConfig: String %>
#import(yetanothertf2configgenerator.ConfigGenerator._)
exec reset

alias start_spawn_switch "alias finish_spawn_switch "join_class <%= currentConfig %>"; join_class random"

#if (classEnableCrouchJump(currentConfig))
  <%= bindif(jump, "+crouchJump") %>
#else
  <%= bindif(jump, "+jump") %>
#end

//class specific crosshairs and weapon visibility and sensitivity
cl_interp_ratio <%= classInterpRatio(currentConfig).toString %>
#for (slot <- 1 to 3)
  alias cross_<%= slot %> "cl_crosshair_red <%= classWeaponColors(currentConfig)(slot - 1)._1 %>; cl_crosshair_green <%= classWeaponColors(currentConfig)(slot - 1)._2 %>; cl_crosshair_blue <%= classWeaponColors(currentConfig)(slot - 1)._3 %>; cl_crosshair_scale <%= classWeaponScales(currentConfig)(slot - 1) %>; cl_crosshair_file <%= classWeaponCrosshairs(currentConfig)(slot - 1) %>"
  alias weap_sens_<%= slot %> "sensitivity <%= classWeaponSensitivity(currentConfig)(slot - 1).toString %>"
  alias weap_ding_<%= slot %> "tf_dingaling_pitchmaxdmg <%= classWeaponDingPitchMax(currentConfig)(slot - 1) %>; tf_dingaling_pitchmindmg <%= classWeaponDingPitchMin(currentConfig)(slot - 1) %>; tf_dingaling_volume <%= classWeaponDingVolume(currentConfig)(slot - 1).toString %>"
  alias weap_zoom_sens_<%= slot %> "sensitivity <%= (classWeaponSensitivity(currentConfig)(slot - 1) / zoomFactor).toString %>"
  alias text_batch_<%= slot %> "hud_combattext_batching <%= classWeaponTextBatch(currentConfig)(slot - 1).toString %>"  
  
  <% if(classWeaponShow(currentConfig)(slot - 1)) { %>
    alias weapon_vis_<%= slot %> show_weapon
  <% } else { %>
    alias weapon_vis_<%= slot %> hide_weapon
  <% } %>

  <% if(classWeaponViewmodelSwitchMode(currentConfig)(slot - 1) == "both" || classWeaponViewmodelSwitchMode(currentConfig)(slot - 1) == "after-shooting") { %>
    alias current_vis_shootswitch_<%= slot %> weapon_vis_<%= slot %>
  <% } else { %>
    alias current_vis_shootswitch_<%= slot %> ""
  <% } %>

  <% if(classWeaponViewmodelSwitchMode(currentConfig)(slot - 1) == "both" || classWeaponViewmodelSwitchMode(currentConfig)(slot - 1) == "after-strafing") { %>
     alias current_vis_strafeswitch_<%= slot %> weapon_vis_<%= slot %>
  <% } else { %>
     alias current_vis_strafeswitch_<%= slot %> ""
  <% } %>

  <% if(classWeaponViewmodelSwitchMode(currentConfig)(slot - 1) == "immediately") { %>
     alias current_vis_immediatelyswitch_<%= slot %> weapon_vis_<%= slot %>
  <% } else { %>
     alias current_vis_immediatelyswitch_<%= slot %> ""
  <% } %>
#end

<%= classExtraScripts(currentConfig) %>

#if (!showFlames)
r_drawviewmodel 1
alias show_weapon "viewmodel_fov <%= viewmodelFov %>"
alias hide_weapon "viewmodel_fov 0.0001"
#else
viewmodel_fov <%= viewmodelFov %>
alias show_weapon "r_drawviewmodel 1"
alias hide_weapon "r_drawviewmodel 0"
#end
